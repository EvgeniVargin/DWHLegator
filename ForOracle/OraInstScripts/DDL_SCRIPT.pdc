BEGIN
  NULL;
  EXECUTE IMMEDIATE 'CREATE SEQUENCE DM_SKB.TB_DS_FTR_WEIGHT_ID_SEQ MINVALUE 1 MAXVALUE 999999999999999    INCREMENT BY 1 START WITH 1 NOCYCLE NOCACHE';
END;
/
BEGIN
  NULL;
  EXECUTE IMMEDIATE 'CREATE SEQUENCE DM_SKB.TB_TRG_REGISTRY_ID_SEQ MINVALUE 1 MAXVALUE 999999999999999    INCREMENT BY 1 START WITH 1 NOCYCLE NOCACHE';
END;
/
BEGIN
  NULL;
  EXECUTE IMMEDIATE 'CREATE SEQUENCE DM_SKB.TB_SIGNS_AGGRS_ID_SEQ MINVALUE 1 MAXVALUE 999999999999    INCREMENT BY 1 START WITH 1 NOCYCLE NOCACHE';
END;
/
BEGIN
  NULL;
  EXECUTE IMMEDIATE 'CREATE SEQUENCE DM_SKB.TB_SIGNS_AGGRS_P_ID_SEQ MINVALUE 1 MAXVALUE 999999999999    INCREMENT BY 1 START WITH 1 NOCYCLE NOCACHE';
END;
/
BEGIN
  NULL;
  EXECUTE IMMEDIATE 'CREATE SEQUENCE DM_SKB.TB_FLAGS_POOL_ID_SEQ MINVALUE 1 MAXVALUE 999999999999    INCREMENT BY 1 START WITH 1 NOCYCLE NOCACHE';
END;
/
BEGIN
  NULL;
  EXECUTE IMMEDIATE 'CREATE SEQUENCE DM_SKB.TB_SIGNS_POOL_ID_SEQ MINVALUE 1 MAXVALUE 9999    INCREMENT BY 1 START WITH 1 NOCYCLE NOCACHE';
END;
/
BEGIN
  NULL;
  EXECUTE IMMEDIATE 'CREATE SEQUENCE DM_SKB.TB_USER_REGISTRY_ID_SEQ MINVALUE 1 MAXVALUE 999999999999    INCREMENT BY 1 START WITH 1 NOCYCLE NOCACHE';
END;
/
BEGIN
  NULL;
  EXECUTE IMMEDIATE 'CREATE SEQUENCE DM_SKB.TB_UROLE_REGISTRY_ID_SEQ MINVALUE 1 MAXVALUE 999999999999    INCREMENT BY 1 START WITH 1 NOCYCLE NOCACHE';
END;
/
BEGIN
  NULL;
  EXECUTE IMMEDIATE 'CREATE SEQUENCE DM_SKB.TB_TABLEKEY_REGISTRY_ID_SEQ MINVALUE 1 MAXVALUE 999999999999    INCREMENT BY 1 START WITH 1 NOCYCLE NOCACHE';
END;
/
BEGIN
  NULL;
  EXECUTE IMMEDIATE 'CREATE SEQUENCE DM_SKB.TB_TFOPTION_REGISTRY_ID_SEQ MINVALUE 1 MAXVALUE 999999999999    INCREMENT BY 1 START WITH 1 NOCYCLE NOCACHE';
END;
/
BEGIN
  NULL;
  EXECUTE IMMEDIATE 'CREATE SEQUENCE DM_SKB.TB_TFIELD_REGISTRY_ID_SEQ MINVALUE 1 MAXVALUE 999999999999    INCREMENT BY 1 START WITH 1 NOCYCLE NOCACHE';
END;
/
BEGIN
  NULL;
  EXECUTE IMMEDIATE 'CREATE SEQUENCE DM_SKB.TB_EMPLOYEES_ID_SEQ MINVALUE 1 MAXVALUE 999999999999    INCREMENT BY 1 START WITH 1 NOCYCLE NOCACHE';
END;
/
BEGIN
  NULL;
  EXECUTE IMMEDIATE 'CREATE SEQUENCE DM_SKB.TB_ENTITY_ID_SEQ MINVALUE 1 MAXVALUE 999999999999    INCREMENT BY 1 START WITH 1 NOCYCLE NOCACHE';
END;
/
BEGIN
  NULL;
  EXECUTE IMMEDIATE 'CREATE SEQUENCE DM_SKB.TB_SIGNS_GROUP_ID_SEQ MINVALUE 1 MAXVALUE 999999999999    INCREMENT BY 1 START WITH 1 NOCYCLE NOCACHE';
END;
/
BEGIN
  NULL;
  EXECUTE IMMEDIATE 'CREATE SEQUENCE DM_SKB.TB_SIGNS_ANLT_ID_SEQ MINVALUE 1 MAXVALUE 999999999999    INCREMENT BY 1 START WITH 1 NOCYCLE NOCACHE';
END;
/
BEGIN
  NULL;
  EXECUTE IMMEDIATE 'CREATE SEQUENCE DM_SKB.TB_SIGNS_ANLT_SPEC_ID_SEQ MINVALUE 1 MAXVALUE 999999999999    INCREMENT BY 1 START WITH 1 NOCYCLE NOCACHE';
END;
/
BEGIN
  NULL;
  EXECUTE IMMEDIATE 'CREATE SEQUENCE DM_SKB.TB_FORM_REGISTRY_ID_SEQ MINVALUE 1 MAXVALUE 999999999999    INCREMENT BY 1 START WITH 1 NOCYCLE NOCACHE';
END;
/
BEGIN
  NULL;
  EXECUTE IMMEDIATE 'CREATE SEQUENCE DM_SKB.TB_CLASS_REGISTRY_ID_SEQ MINVALUE 1 MAXVALUE 999999999999    INCREMENT BY 1 START WITH 1 NOCYCLE NOCACHE';
END;
/
BEGIN
  NULL;
  EXECUTE IMMEDIATE 'CREATE SEQUENCE DM_SKB.TB_ROLE_REGISTRY_ID_SEQ MINVALUE 1 MAXVALUE 999999999999    INCREMENT BY 1 START WITH 1 NOCYCLE NOCACHE';
END;
/
BEGIN
  NULL;
  EXECUTE IMMEDIATE 'CREATE SEQUENCE DM_SKB.TB_APARAM_REGISTRY_ID_SEQ MINVALUE 1 MAXVALUE 999999999999    INCREMENT BY 1 START WITH 1 NOCYCLE NOCACHE';
END;
/
BEGIN
  NULL;
  EXECUTE IMMEDIATE 'CREATE SEQUENCE DM_SKB.TB_QACTION_REGISTRY_ID_SEQ MINVALUE 1 MAXVALUE 999999999999    INCREMENT BY 1 START WITH 1 NOCYCLE NOCACHE';
END;
/
BEGIN
  NULL;
  EXECUTE IMMEDIATE 'CREATE SEQUENCE DM_SKB.TB_FOPTION_REGISTRY_ID_SEQ MINVALUE 1 MAXVALUE 999999999999    INCREMENT BY 1 START WITH 1 NOCYCLE NOCACHE';
END;
/
BEGIN
  NULL;
  EXECUTE IMMEDIATE 'CREATE SEQUENCE DM_SKB.TB_VERSION_REGISTRY_ID_SEQ MINVALUE 1 MAXVALUE 999999999999    INCREMENT BY 1 START WITH 1 NOCYCLE NOCACHE';
END;
/
BEGIN
  NULL;
  EXECUTE IMMEDIATE 'CREATE SEQUENCE DM_SKB.TB_LABEL_REGISTRY_ID_SEQ MINVALUE 1 MAXVALUE 999999999999    INCREMENT BY 1 START WITH 1 NOCYCLE NOCACHE';
END;
/
BEGIN
  NULL;
  EXECUTE IMMEDIATE 'CREATE SEQUENCE DM_SKB.TB_TABLES_REGISTRY_ID_SEQ MINVALUE 1 MAXVALUE 999999999999    INCREMENT BY 1 START WITH 1 NOCYCLE NOCACHE';
END;
/
BEGIN
  NULL;
  EXECUTE IMMEDIATE 'CREATE SEQUENCE DM_SKB.TB_QPARAM_REGISTRY_ID_SEQ MINVALUE 1 MAXVALUE 999999999999    INCREMENT BY 1 START WITH 1 NOCYCLE NOCACHE';
END;
/
BEGIN
  NULL;
  EXECUTE IMMEDIATE 'CREATE SEQUENCE DM_SKB.TB_VARIABLE_REGISTRY_ID_SEQ MINVALUE 1 MAXVALUE 999999999999    INCREMENT BY 1 START WITH 1 NOCYCLE NOCACHE';
END;
/
BEGIN
  NULL;
  EXECUTE IMMEDIATE 'CREATE SEQUENCE DM_SKB.TB_FCOLOR_REGISTRY_ID_SEQ MINVALUE 1 MAXVALUE 999999999999    INCREMENT BY 1 START WITH 1 NOCYCLE NOCACHE';
END;
/
BEGIN
  NULL;
  EXECUTE IMMEDIATE 'CREATE SEQUENCE DM_SKB.TB_REPFORM_REGISTRY_ID_SEQ MINVALUE 1 MAXVALUE 999999999999    INCREMENT BY 1 START WITH 1 NOCYCLE NOCACHE';
END;
/
BEGIN
  NULL;
  EXECUTE IMMEDIATE 'CREATE SEQUENCE DM_SKB.TB_QUERY_REGISTRY_ID_SEQ MINVALUE 1 MAXVALUE 999999999999    INCREMENT BY 1 START WITH 1 NOCYCLE NOCACHE';
END;
/
BEGIN
  NULL;
  EXECUTE IMMEDIATE 'CREATE SEQUENCE DM_SKB.TB_FPARAM_REGISTRY_ID_SEQ MINVALUE 1 MAXVALUE 999999999999    INCREMENT BY 1 START WITH 1 NOCYCLE NOCACHE';
END;
/
BEGIN
  NULL;
  EXECUTE IMMEDIATE 'CREATE SEQUENCE DM_SKB.TB_QROLE_REGISTRY_ID_SEQ MINVALUE 1 MAXVALUE 999999999999    INCREMENT BY 1 START WITH 1 NOCYCLE NOCACHE';
END;
/
BEGIN
  NULL;
  EXECUTE IMMEDIATE 'CREATE SEQUENCE DM_SKB.TB_LABROLE_REGISTRY_ID_SEQ MINVALUE 1 MAXVALUE 999999999999    INCREMENT BY 1 START WITH 1 NOCYCLE NOCACHE';
END;
/
BEGIN
  NULL;
  EXECUTE IMMEDIATE 'CREATE SEQUENCE DM_SKB.TB_FIELD_REGISTRY_ID_SEQ MINVALUE 1 MAXVALUE 999999999999    INCREMENT BY 1 START WITH 1 NOCYCLE NOCACHE';
END;
/
BEGIN
  NULL;
END;
/
BEGIN
  NULL;
  EXECUTE IMMEDIATE 'CREATE SEQUENCE DM_SKB.TB_EMP_TO_DEP_ID_SEQ MINVALUE 1 MAXVALUE 999999999999    INCREMENT BY 1 START WITH 1 NOCYCLE NOCACHE';
END;
/
BEGIN
  NULL;
  EXECUTE IMMEDIATE 'CREATE SEQUENCE DM_SKB.TB_SIGNS_JOB_ID_SEQ MINVALUE 1 MAXVALUE 9999999    INCREMENT BY 1 START WITH 1 CYCLE NOCACHE';
END;
/
BEGIN
  NULL;
  EXECUTE IMMEDIATE 'CREATE SEQUENCE DM_SKB.TB_SIGNS_CALC_STAT_ID_SEQ MINVALUE 1 MAXVALUE 999999999999    INCREMENT BY 1 START WITH 1 NOCYCLE NOCACHE';
END;
/
BEGIN
  NULL;
  EXECUTE IMMEDIATE 'CREATE SEQUENCE DM_SKB.TB_SEQ_REGISTRY_ID_SEQ MINVALUE 1 MAXVALUE 999999999999    INCREMENT BY 1 START WITH 1 NOCYCLE NOCACHE';
END;
/
BEGIN
  NULL;
  EXECUTE IMMEDIATE 'CREATE SEQUENCE DM_SKB.TB_SIGNS_LOG_ID_SEQ MINVALUE 1 MAXVALUE 999999999999    INCREMENT BY 1 START WITH 1 NOCYCLE NOCACHE';
END;
/
BEGIN
  NULL;
  EXECUTE IMMEDIATE 'CREATE SEQUENCE DM_SKB.TB_SIGN_2_ANLT_ID_SEQ MINVALUE 1 MAXVALUE 999999999999    INCREMENT BY 1 START WITH 1 NOCYCLE NOCACHE';
END;
/
BEGIN
  NULL;
  EXECUTE IMMEDIATE 'CREATE SEQUENCE DM_SKB.TB_SIGNS_HISTORY_ID_SEQ MINVALUE 1 MAXVALUE 999999999999    INCREMENT BY 1 START WITH 1 NOCYCLE NOCACHE';
END;
/
BEGIN
  NULL;
  EXECUTE IMMEDIATE 'CREATE SEQUENCE DM_SKB.TB_SIGNS_2_GROUP_ID_SEQ MINVALUE 1 MAXVALUE 999999999999    INCREMENT BY 1 START WITH 1 NOCYCLE NOCACHE';
END;
/
BEGIN
  NULL;
  EXECUTE IMMEDIATE 'CREATE SEQUENCE DM_SKB.TB_ANLT_2_GROUP_ID_SEQ MINVALUE 1 MAXVALUE 999999999999    INCREMENT BY 1 START WITH 1 NOCYCLE NOCACHE';
END;
/
BEGIN
  NULL;
  EXECUTE IMMEDIATE 'CREATE SEQUENCE DM_SKB.TB_SIGN_2_SIGN_ID_SEQ MINVALUE 1 MAXVALUE 999999999999    INCREMENT BY 1 START WITH 1 NOCYCLE NOCACHE';
END;
/
BEGIN
  NULL;
  EXECUTE IMMEDIATE 'CREATE SEQUENCE DM_SKB.TB_DS_MDL_ID_SEQ MINVALUE 1 MAXVALUE 999999999999999    INCREMENT BY 1 START WITH 1 NOCYCLE NOCACHE';
END;
/
BEGIN
  NULL;
  EXECUTE IMMEDIATE 'CREATE SEQUENCE DM_SKB.TB_DS_FTRS_ID_SEQ MINVALUE 1 MAXVALUE 999999999999999    INCREMENT BY 1 START WITH 1 NOCYCLE NOCACHE';
END;
/
BEGIN
  NULL;
  EXECUTE IMMEDIATE 'CREATE SEQUENCE DM_SKB.TB_SIGNS_DAEMONS_ID_SEQ MINVALUE 1 MAXVALUE 999999999999    INCREMENT BY 1 START WITH 1 NOCYCLE NOCACHE';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{CREATE TABLE DM_SKB.TB_DS_FTR_WEIGHT (
 ID NUMBER NOT NULL
,FTR_ID NUMBER NOT NULL
,DT DATE NOT NULL
,FTR_WEIGHT NUMBER) tablespace PCAP_DATA}';
EXECUTE IMMEDIATE q'{COMMENT ON TABLE DM_SKB.TB_DS_FTR_WEIGHT IS 'Веса фичей'}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{CREATE TABLE DM_SKB.TB_TRG_REGISTRY (
 ID NUMBER NOT NULL
,TABLE_ID NUMBER
,TRG_NAME VARCHAR2(256)
,TRG_PLSQL CLOB
,SOFT_TYPE VARCHAR2(30)) tablespace PCAP_DATA}';
EXECUTE IMMEDIATE q'{COMMENT ON TABLE DM_SKB.TB_TRG_REGISTRY IS 'Триггеры'}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{CREATE TABLE DM_SKB.TB_SIGNS_AGGRS (
 ID NUMBER NOT NULL
,GROUP_ID NUMBER NOT NULL
,AGGR_SQL CLOB NOT NULL
,AGGR_NAME VARCHAR2(4000) NOT NULL) tablespace PCAP_DATA}';
EXECUTE IMMEDIATE q'{COMMENT ON TABLE DM_SKB.TB_SIGNS_AGGRS IS 'Справочник агрегатов'}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{CREATE TABLE DM_SKB.TB_SIGNS_AGGRS_P (
 ID NUMBER NOT NULL
,AGGR_ID NUMBER NOT NULL
,P_NAME VARCHAR2(256) NOT NULL
,P_VALUE CLOB) tablespace PCAP_DATA}';
EXECUTE IMMEDIATE q'{COMMENT ON TABLE DM_SKB.TB_SIGNS_AGGRS_P IS 'Справочник параметров агрегатов'}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{CREATE TABLE DM_SKB.TB_FLAGS_POOL (
 ID NUMBER NOT NULL
,NAME VARCHAR2(4000) NOT NULL
,DT DATE NOT NULL
,VAL VARCHAR2(4000)) tablespace PCAP_DATA}';
EXECUTE IMMEDIATE q'{COMMENT ON TABLE DM_SKB.TB_FLAGS_POOL IS 'Флаги'}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{CREATE TABLE DM_SKB.TB_SIGNS_POOL (
 ID NUMBER NOT NULL
,SIGN_NAME VARCHAR2(255)
,SIGN_DESCR VARCHAR2(255)
,ARCHIVE_FLG NUMBER(22) DEFAULT 0

,DATA_TYPE VARCHAR2(255)
,SP_CODE VARCHAR2(30)
,HIST_FLG NUMBER(22) DEFAULT 0

,SIGN_SQL CLOB
,MASS_SQL CLOB
,ENTITY_ID NUMBER NOT NULL
,EXT_PLSQL CLOB
,CONDITION CLOB
,LASTUPDATE DATE) tablespace PCAP_DATA}';
EXECUTE IMMEDIATE q'{COMMENT ON TABLE DM_SKB.TB_SIGNS_POOL IS 'Справочник показателей'}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{CREATE TABLE DM_SKB.TB_USER_REGISTRY (
 ID NUMBER NOT NULL
,USER_NAME VARCHAR2(256)
,MAIL_DOMAIN VARCHAR2(256) DEFAULT 'skbbank.ru'

,AD_LOGIN VARCHAR2(256)
,USER_FIO VARCHAR2(4000)) tablespace PCAP_DATA}';
EXECUTE IMMEDIATE q'{COMMENT ON TABLE DM_SKB.TB_USER_REGISTRY IS 'Пользователи'}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{CREATE TABLE DM_SKB.TB_UROLE_REGISTRY (
 ID NUMBER NOT NULL
,USER_ID NUMBER NOT NULL
,ROLE_ID NUMBER NOT NULL) tablespace PCAP_DATA}';
EXECUTE IMMEDIATE q'{COMMENT ON TABLE DM_SKB.TB_UROLE_REGISTRY IS 'Назначение ролей пользователей'}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{CREATE TABLE DM_SKB.TB_TABLEKEY_REGISTRY (
 ID NUMBER NOT NULL
,TABLE_ID NUMBER NOT NULL
,KEY_NAME VARCHAR2(256) NOT NULL
,KEY_TYPE VARCHAR2(256) NOT NULL
,KEY_FIELDS VARCHAR2(4000) NOT NULL
,FK_TABLE VARCHAR2(256)
,FK_ONDELETE VARCHAR2(30)) tablespace PCAP_DATA}';
EXECUTE IMMEDIATE q'{COMMENT ON TABLE DM_SKB.TB_TABLEKEY_REGISTRY IS 'Ключи и индексы таблиц'}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{CREATE TABLE DM_SKB.TB_TFOPTION_REGISTRY (
 ID NUMBER NOT NULL
,FIELD_ID NUMBER NOT NULL
,OPT_NAME VARCHAR2(256) NOT NULL
,OPT_VAL VARCHAR2(4000)) tablespace PCAP_DATA}';
EXECUTE IMMEDIATE q'{COMMENT ON TABLE DM_SKB.TB_TFOPTION_REGISTRY IS 'Настройки полей таблиц'}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{CREATE TABLE DM_SKB.TB_TFIELD_REGISTRY (
 ID NUMBER NOT NULL
,TABLE_ID NUMBER(30)
,FIELD_NAME VARCHAR2(30) NOT NULL
,FIELD_TYPE VARCHAR2(30) NOT NULL
,FIELD_COMMENT VARCHAR2(4000)
,SEQUENCE_NAME VARCHAR2(256)
,ORD NUMBER NOT NULL) tablespace PCAP_DATA}';
EXECUTE IMMEDIATE q'{COMMENT ON TABLE DM_SKB.TB_TFIELD_REGISTRY IS 'Поля таблиц'}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{CREATE TABLE DM_SKB.TB_EMPLOYEES (
 ID NUMBER NOT NULL
,EMPLOYEE_NAME VARCHAR2(4000) NOT NULL
,AD_LOGIN VARCHAR2(256)
,LASTUPDATE DATE) tablespace PCAP_DATA}';
EXECUTE IMMEDIATE q'{COMMENT ON TABLE DM_SKB.TB_EMPLOYEES IS 'Справочник сотрудников'}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{CREATE TABLE DM_SKB.TB_ENTITY (
 ID NUMBER NOT NULL
,ENTITY_NAME VARCHAR2(256)
,FCT_TABLE_NAME VARCHAR2(256)
,HIST_TABLE_NAME VARCHAR2(256)
,TMP_TABLE_NAME VARCHAR2(256)
,PARENT_ID NUMBER
,ANLT_FLG NUMBER(22) DEFAULT 0
) tablespace PCAP_DATA}';
EXECUTE IMMEDIATE q'{COMMENT ON TABLE DM_SKB.TB_ENTITY IS 'Справочник сущностей'}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{CREATE TABLE DM_SKB.TB_SIGNS_GROUP (
 GROUP_ID NUMBER NOT NULL
,GROUP_NAME VARCHAR2(4000)
,PARENT_GROUP_ID NUMBER
,STRG_PERIOD NUMBER(22)
,STRG_PERIOD_TYPE VARCHAR2(1)) tablespace PCAP_DATA}';
EXECUTE IMMEDIATE q'{COMMENT ON TABLE DM_SKB.TB_SIGNS_GROUP IS 'Справочник групп'}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{CREATE TABLE DM_SKB.TB_SIGNS_ANLT (
 ID NUMBER NOT NULL
,EFFECTIVE_START DATE
,EFFECTIVE_END DATE
,ANLT_CODE VARCHAR2(256) NOT NULL
,ANLT_NAME VARCHAR2(4000) NOT NULL
,ARCHIVE_FLG NUMBER(22) DEFAULT 1
   
,ENTITY_ID NUMBER
,ANLT_SQL CLOB
,ANLT_ALIAS VARCHAR2(30)
,DATA_TYPE VARCHAR2(30)
,ANLT_ALIAS_DESCR VARCHAR2(4000)
,SPEC_IMPORT_SQL CLOB) tablespace PCAP_DATA}';
EXECUTE IMMEDIATE q'{COMMENT ON TABLE DM_SKB.TB_SIGNS_ANLT IS 'Справочник аналитик'}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{CREATE TABLE DM_SKB.TB_SIGNS_ANLT_SPEC (
 ID NUMBER NOT NULL
,ANLT_ID NUMBER NOT NULL
,ANLT_SPEC_NAME VARCHAR2(4000)
,CONDITION CLOB
,ANLT_SPEC_VAL VARCHAR2(4000)
,PARENT_VAL VARCHAR2(4000)
,BLOCK_IMPORT NUMBER(22) DEFAULT 0
) tablespace PCAP_DATA}';
EXECUTE IMMEDIATE q'{COMMENT ON TABLE DM_SKB.TB_SIGNS_ANLT_SPEC IS 'Спецификация справочника аналитик'}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{CREATE TABLE DM_SKB.TB_FORM_REGISTRY (
 ID NUMBER NOT NULL
,CLASS_ID NUMBER NOT NULL
,FORM_NAME VARCHAR2(256) NOT NULL
,FORM_CAPTION VARCHAR2(256) NOT NULL
,SOFT_TYPE VARCHAR2(30)) tablespace PCAP_DATA}';
EXECUTE IMMEDIATE q'{COMMENT ON TABLE DM_SKB.TB_FORM_REGISTRY IS 'Справочник форм'}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{CREATE TABLE DM_SKB.TB_CLASS_REGISTRY (
 CLASS_NAME VARCHAR2(256)
,CLASS_DESCR VARCHAR2(4000)
,ID NUMBER NOT NULL
,PARENT_ID NUMBER
,ORD NUMBER) tablespace PCAP_DATA}';
EXECUTE IMMEDIATE q'{COMMENT ON TABLE DM_SKB.TB_CLASS_REGISTRY IS 'Справочник классов'}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{CREATE TABLE DM_SKB.TB_ROLE_REGISTRY (
 ID NUMBER NOT NULL
,ROLE_NAME VARCHAR2(256) NOT NULL
,PARENT_ID NUMBER) tablespace PCAP_DATA}';
EXECUTE IMMEDIATE q'{COMMENT ON TABLE DM_SKB.TB_ROLE_REGISTRY IS 'Справочник ролей'}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{CREATE TABLE DM_SKB.TB_APARAM_REGISTRY (
 ID NUMBER NOT NULL
,ACTION_ID NUMBER NOT NULL
,PNAME VARCHAR2(256)
,PVAL VARCHAR2(4000)
,PTYPE VARCHAR2(256)
,ORD NUMBER
,PDATATYPE VARCHAR2(256)
,MANUAL_INPUT NUMBER DEFAULT 0

,PDESCR VARCHAR2(256)) tablespace PCAP_DATA}';
EXECUTE IMMEDIATE q'{COMMENT ON TABLE DM_SKB.TB_APARAM_REGISTRY IS 'Описание параметров обработок'}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{CREATE TABLE DM_SKB.TB_QACTION_REGISTRY (
 ID NUMBER NOT NULL
,QUERY_ID NUMBER
,ACT_NAME VARCHAR2(256)
,ACT_DESCR VARCHAR2(4000)
,ORD NUMBER
,ACT_PLSQL CLOB
,VISIBLE NUMBER DEFAULT 1

,BEFORE_MES_TXT VARCHAR2(4000)
,BEFORE_MES_BTN VARCHAR2(256)
,BEFORE_MES_TYPE VARCHAR2(256)
,AFTER_MES_TXT VARCHAR2(4000)
,AFTER_MES_BTN VARCHAR2(256)
,AFTER_MES_TYPE VARCHAR2(256)
,YES_ACT_ID NUMBER
,NO_ACT_ID NUMBER
,BUTTON_NAME VARCHAR2(256)
,BTN_CONT_NAME VARCHAR2(256)
,NEED_REFRESH NUMBER DEFAULT 0

,SOFT_TYPE VARCHAR2(30)) tablespace PCAP_DATA}';
EXECUTE IMMEDIATE q'{COMMENT ON TABLE DM_SKB.TB_QACTION_REGISTRY IS 'Описание обработок'}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{CREATE TABLE DM_SKB.TB_FOPTION_REGISTRY (
 ID NUMBER NOT NULL
,FIELD_ID NUMBER NOT NULL
,OPT_NAME VARCHAR2(256)
,OPT_VAL VARCHAR2(4000)) tablespace PCAP_DATA}';
EXECUTE IMMEDIATE q'{COMMENT ON TABLE DM_SKB.TB_FOPTION_REGISTRY IS 'Описание свойств полей для наборов данных'}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{CREATE TABLE DM_SKB.TB_VERSION_REGISTRY (
 VERS_NUM VARCHAR2(30)
,VERS_FILE BLOB
,EXENAME VARCHAR2(256)
,ID NUMBER NOT NULL
,ENHANCEMENTS CLOB) tablespace PCAP_DATA}';
EXECUTE IMMEDIATE q'{COMMENT ON TABLE DM_SKB.TB_VERSION_REGISTRY IS 'Описание версий приложения'}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{CREATE TABLE DM_SKB.TB_LABEL_REGISTRY (
 ID NUMBER NOT NULL
,CAPTION VARCHAR2(256)
,ORD NUMBER
,PARENT_ID NUMBER
,FORM_ID NUMBER
,SOFT_TYPE VARCHAR2(30)) tablespace PCAP_DATA}';
EXECUTE IMMEDIATE q'{COMMENT ON TABLE DM_SKB.TB_LABEL_REGISTRY IS 'Справочник пунктов меню (дерево слева)'}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{CREATE TABLE DM_SKB.TB_TABLES_REGISTRY (
 ID NUMBER NOT NULL
,TABLE_NAME VARCHAR2(256)
,TABLE_COMMENT VARCHAR2(4000)
,SOFT_TYPE VARCHAR2(30)) tablespace PCAP_DATA}';
EXECUTE IMMEDIATE q'{COMMENT ON TABLE DM_SKB.TB_TABLES_REGISTRY IS 'Описание таблиц'}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{CREATE TABLE DM_SKB.TB_QPARAM_REGISTRY (
 ID NUMBER NOT NULL
,QUERY_ID NUMBER NOT NULL
,PNAME VARCHAR2(256)
,PVAL VARCHAR2(4000)
,ORD NUMBER
,PTYPE VARCHAR2(256)
,PDESCR VARCHAR2(256)
,PVALDISPLAY VARCHAR2(4000)
,PLOOKUPSQL CLOB
,PNAMEPARENT VARCHAR2(256)) tablespace PCAP_DATA}';
EXECUTE IMMEDIATE q'{COMMENT ON TABLE DM_SKB.TB_QPARAM_REGISTRY IS 'Описание параметров наборов данных'}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{CREATE TABLE DM_SKB.TB_VARIABLE_REGISTRY (
 ID NUMBER NOT NULL
,NAME VARCHAR2(256)
,VAL CLOB
,VAR_TYPE VARCHAR2(30)) tablespace PCAP_DATA}';
EXECUTE IMMEDIATE q'{COMMENT ON TABLE DM_SKB.TB_VARIABLE_REGISTRY IS 'Справочник переменных приложения'}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{CREATE TABLE DM_SKB.TB_FCOLOR_REGISTRY (
 ID NUMBER NOT NULL
,FIELD_ID NUMBER NOT NULL
,FVAL VARCHAR2(256)
,BRUSH_COLOR VARCHAR2(256)
,FONT_COLOR VARCHAR2(256)) tablespace PCAP_DATA}';
EXECUTE IMMEDIATE q'{COMMENT ON TABLE DM_SKB.TB_FCOLOR_REGISTRY IS 'Описание раскраски наборов данных'}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{CREATE TABLE DM_SKB.TB_REPFORM_REGISTRY (
 ID NUMBER NOT NULL
,FORM_ID NUMBER NOT NULL
,QUERY_ID NUMBER NOT NULL) tablespace PCAP_DATA}';
EXECUTE IMMEDIATE q'{COMMENT ON TABLE DM_SKB.TB_REPFORM_REGISTRY IS 'Привязка отчетов к формам (только для отчетов, т.к. для отчетов требуется связь много - ко - многим)'}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{CREATE TABLE DM_SKB.TB_QUERY_REGISTRY (
 QUERY_NAME VARCHAR2(256)
,QUERY_SQL CLOB
,ID NUMBER NOT NULL
,FORM_ID NUMBER
,ORD NUMBER
,IS_LOOKUP NUMBER
,KEY_FIELD VARCHAR2(256)
,KEY_SEQUENCE VARCHAR2(256)
,MASTER_KEY_FIELD VARCHAR2(256)
,DETAIL_KEY_FIELD VARCHAR2(256)
,IS_REPORT NUMBER DEFAULT 0

,QUERY_DESCR VARCHAR2(4000)
,MASTER_QUERY_NAME VARCHAR2(256)
,SOFT_TYPE VARCHAR2(30)) tablespace PCAP_DATA}';
EXECUTE IMMEDIATE q'{COMMENT ON TABLE DM_SKB.TB_QUERY_REGISTRY IS 'Описание наборов данных'}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{CREATE TABLE DM_SKB.TB_FPARAM_REGISTRY (
 ID NUMBER NOT NULL
,FORM_ID NUMBER NOT NULL
,PNAME VARCHAR2(256)
,PTYPE VARCHAR2(256)
,PVAL VARCHAR2(4000)
,ORD NUMBER) tablespace PCAP_DATA}';
EXECUTE IMMEDIATE q'{COMMENT ON TABLE DM_SKB.TB_FPARAM_REGISTRY IS 'Описание параметров форм'}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{CREATE TABLE DM_SKB.TB_QROLE_REGISTRY (
 ID NUMBER NOT NULL
,QUERY_ID NUMBER NOT NULL
,ROLE_ID NUMBER NOT NULL) tablespace PCAP_DATA}';
EXECUTE IMMEDIATE q'{COMMENT ON TABLE DM_SKB.TB_QROLE_REGISTRY IS 'Привязка наборов данных к ролям (необходима для отображения отчетов)'}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{CREATE TABLE DM_SKB.TB_LABROLE_REGISTRY (
 ID NUMBER NOT NULL
,LABEL_ID NUMBER NOT NULL
,ROLE_ID NUMBER NOT NULL) tablespace PCAP_DATA}';
EXECUTE IMMEDIATE q'{COMMENT ON TABLE DM_SKB.TB_LABROLE_REGISTRY IS 'Привязка ролей к пунктам меню (определяет, кто видит какие пункты в дереве слева)'}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{CREATE TABLE DM_SKB.TB_FIELD_REGISTRY (
 ID NUMBER NOT NULL
,QUERY_ID NUMBER NOT NULL
,FIELD_NAME VARCHAR2(256)
,LOOKUP_QUERY VARCHAR2(256)
,LOOKUP_KEY VARCHAR2(256)
,LOOKUP_ID VARCHAR2(256)
,LOOKUP_RESULT VARCHAR2(256)
,ORD NUMBER
,FIELD_TYPE VARCHAR2(256)
,IS_COLOR_FIELD NUMBER DEFAULT 0
) tablespace PCAP_DATA}';
EXECUTE IMMEDIATE q'{COMMENT ON TABLE DM_SKB.TB_FIELD_REGISTRY IS 'Описание полей наборов данных'}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{CREATE TABLE DM_SKB.TB_DEPARTMENTS (
 ID NUMBER NOT NULL
,PARENT_ID NUMBER
,DEPARTMENT_CODE VARCHAR2(4000)
,DEPARTMENT_NAME VARCHAR2(4000)
,LASTUPDATE DATE) tablespace PCAP_DATA}';
EXECUTE IMMEDIATE q'{COMMENT ON TABLE DM_SKB.TB_DEPARTMENTS IS 'Справочник подразделений'}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{CREATE TABLE DM_SKB.TB_EMP_TO_DEP (
 ID NUMBER NOT NULL
,EMPLOYEE_ID NUMBER NOT NULL
,DEP_ID NUMBER NOT NULL
,LASTUPDATE DATE) tablespace PCAP_DATA}';
EXECUTE IMMEDIATE q'{COMMENT ON TABLE DM_SKB.TB_EMP_TO_DEP IS 'Сотрудники по подразделениям'}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{CREATE TABLE DM_SKB.TB_SIGNS_JOB (
 JOB_NAME VARCHAR2(256)
,START_TIME DATE
,ACTION_SQL VARCHAR2(4000)
,ELAPSED_TIME VARCHAR2(30)
,STATE VARCHAR2(30)
,LAST_UPDATE DATE
,HEAD_JOB_NAME VARCHAR2(256)) tablespace PCAP_DATA}';
EXECUTE IMMEDIATE q'{COMMENT ON TABLE DM_SKB.TB_SIGNS_JOB IS 'История запускаемых джобов'}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{CREATE TABLE DM_SKB.TB_SIGNS_CALC_STAT (
 ID NUMBER NOT NULL
,DT DATE DEFAULT SYSDATE
  
,SIGN_NAME VARCHAR2(256)
,ANLT_CODE VARCHAR2(256)
,SEC NUMBER
,ACTION VARCHAR2(30)) tablespace PCAP_DATA}';
EXECUTE IMMEDIATE q'{COMMENT ON TABLE DM_SKB.TB_SIGNS_CALC_STAT IS 'Статистика времени расчетов'}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{CREATE TABLE DM_SKB.TB_SEQ_REGISTRY (
 ID NUMBER NOT NULL
,SEQ_NAME VARCHAR2(256) NOT NULL
,MIN_VALUE NUMBER NOT NULL
,MAX_VALUE NUMBER NOT NULL
,INCREMENT_BY NUMBER NOT NULL
,CYCLE_FLAG VARCHAR2(1) NOT NULL
,CACHE_SIZE NUMBER NOT NULL
,SOFT_TYPE VARCHAR2(30)) tablespace PCAP_DATA}';
EXECUTE IMMEDIATE q'{COMMENT ON TABLE DM_SKB.TB_SEQ_REGISTRY IS 'Последовательности'}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{CREATE TABLE DM_SKB.TB_SIGNS_LOG (
 ID NUMBER NOT NULL
,DAT DATE
,UNIT VARCHAR2(4000)
,MESSAGE VARCHAR2(4000)) tablespace PCAP_DATA}';
EXECUTE IMMEDIATE q'{COMMENT ON TABLE DM_SKB.TB_SIGNS_LOG IS 'Логи расчетов'}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{CREATE TABLE DM_SKB.TB_SIGN_2_ANLT (
 SIGN_NAME VARCHAR2(256) NOT NULL
,ANLT_CODE VARCHAR2(256) NOT NULL
,ACTIVE_FLG NUMBER
,ID NUMBER NOT NULL) tablespace PCAP_DATA}';
EXECUTE IMMEDIATE q'{COMMENT ON TABLE DM_SKB.TB_SIGN_2_ANLT IS 'Привязка показателей к аналитикам'}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{CREATE TABLE DM_SKB.TB_SIGNS_HISTORY (
 ID NUMBER NOT NULL
,TABLE_NAME VARCHAR2(30)
,COL_NAME VARCHAR2(30)
,DT DATE
,OS_USER VARCHAR2(30)
,IP_ADDR VARCHAR2(30)
,DML_TYPE VARCHAR2(1)
,OLD_VAL CLOB
,NEW_VAL CLOB
,TABLE_ID VARCHAR2(255)) tablespace PCAP_DATA}';
EXECUTE IMMEDIATE q'{COMMENT ON TABLE DM_SKB.TB_SIGNS_HISTORY IS 'История изменений'}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{CREATE TABLE DM_SKB.TB_SIGNS_2_GROUP (
 SIGN_NAME VARCHAR2(256) NOT NULL
,GROUP_ID NUMBER NOT NULL
,ACTIVE_FLG NUMBER DEFAULT 1

,SGN_ALIAS VARCHAR2(256)
,ID NUMBER NOT NULL
,SIGN_ID NUMBER NOT NULL
,PREAGGR_FLG NUMBER DEFAULT 0) tablespace PCAP_DATA}';
EXECUTE IMMEDIATE q'{COMMENT ON TABLE DM_SKB.TB_SIGNS_2_GROUP IS 'Привязка показателей к группам'}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{CREATE TABLE DM_SKB.TB_ANLT_2_GROUP (
 ANLT_CODE VARCHAR2(256) NOT NULL
,GROUP_ID NUMBER NOT NULL
,ACTIVE_FLG NUMBER
,ID NUMBER NOT NULL) tablespace PCAP_DATA}';
EXECUTE IMMEDIATE q'{COMMENT ON TABLE DM_SKB.TB_ANLT_2_GROUP IS 'Привязка аналитик к группам'}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{CREATE TABLE DM_SKB.TB_SIGN_2_SIGN (
 SIGN_NAME VARCHAR2(255) NOT NULL
,PREV_SIGN_NAME VARCHAR2(255) NOT NULL
,ACTIVE_FLG NUMBER
,ID NUMBER NOT NULL) tablespace PCAP_DATA}';
EXECUTE IMMEDIATE q'{COMMENT ON TABLE DM_SKB.TB_SIGN_2_SIGN IS 'Зависимость показателей'}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{CREATE TABLE DM_SKB.TB_DS_MDL (
 ID NUMBER NOT NULL
,PARENT_ID NUMBER
,MODEL_NAME VARCHAR2(256)
,MODEL_DESCR VARCHAR2(4000)
,TARGET_NAME VARCHAR2(256)
,ARCHIVE_FLG NUMBER
,VALID_PRC NUMBER
,DS_ALGO VARCHAR2(30)) tablespace PCAP_DATA}';
EXECUTE IMMEDIATE q'{COMMENT ON TABLE DM_SKB.TB_DS_MDL IS 'Справочник моделей'}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{CREATE TABLE DM_SKB.TB_DS_FTRS (
 ID NUMBER NOT NULL
,MDL_ID NUMBER
,FTR_NAME VARCHAR2(256)
,FTR_DESCR VARCHAR2(4000)
,ARCHIVE_FLG NUMBER
,FTR_SQL CLOB
,FTR_TYPE VARCHAR2(10)) tablespace PCAP_DATA}';
EXECUTE IMMEDIATE q'{COMMENT ON TABLE DM_SKB.TB_DS_FTRS IS 'Справочник фичей'}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{CREATE TABLE DM_SKB.TB_SIGNS_DAEMONS (
 ID NUMBER NOT NULL
,COND_BLOCK CLOB
,DEF_COND_PARAMS VARCHAR2(4000)
,EXEC_BLOCK CLOB
,DEF_EXEC_PARAMS VARCHAR2(4000)
,NAME VARCHAR2(4000)
,ARCHIVE_FLG NUMBER DEFAULT 1
,PARENT_ID NUMBER) tablespace PCAP_DATA}';
EXECUTE IMMEDIATE q'{COMMENT ON TABLE DM_SKB.TB_SIGNS_DAEMONS IS 'Справочник заданий по расписанию'}';
END;
/
CREATE OR REPLACE TRIGGER DM_SKB.TB_DS_FTR_WEIGHT_ID_TRG BEFORE INSERT ON DM_SKB.TB_DS_FTR_WEIGHT FOR EACH ROW
BEGIN
  :NEW.ID := DM_SKB.TB_DS_FTR_WEIGHT_ID_SEQ.NEXTVAL;
END TB_DS_FTR_WEIGHT_ID_TRG;
/
CREATE OR REPLACE TRIGGER DM_SKB.TB_TRG_REGISTRY_ID_TRG BEFORE INSERT ON DM_SKB.TB_TRG_REGISTRY FOR EACH ROW
BEGIN
:NEW.ID := DM_SKB.TB_TRG_REGISTRY_ID_SEQ.NEXTVAL;
END TB_TRG_REGISTRY_ID_TRG;
/
CREATE OR REPLACE TRIGGER DM_SKB.tb_signs_aggrs_id_trg BEFORE INSERT ON DM_SKB.tb_signs_aggrs FOR EACH ROW
DECLARE
BEGIN
  :NEW.id := DM_SKB.tb_signs_aggrs_id_seq.nextval;
END tb_signs_aggrs_id_trg;
/
CREATE OR REPLACE TRIGGER DM_SKB.tb_signs_aggrs_p_id_trg BEFORE INSERT ON DM_SKB.tb_signs_aggrs_p FOR EACH ROW
DECLARE
BEGIN
  :NEW.id := DM_SKB.tb_signs_aggrs_p_id_seq.nextval;
END tb_signs_aggrs_p_id_trg;
/
CREATE OR REPLACE TRIGGER DM_SKB.TB_FLAGS_POOL_ID_TRG BEFORE INSERT ON DM_SKB.TB_FLAGS_POOL FOR EACH ROW
BEGIN
  :NEW.id := DM_SKB.TB_FLAGS_POOL_ID_SEQ.NEXTVAL;
END TB_FLAGS_POOL_ID_TRG;
/
CREATE OR REPLACE TRIGGER DM_SKB.tb_signs_pool_id_trg BEFORE INSERT ON DM_SKB.tb_signs_pool FOR EACH ROW
BEGIN
  SELECT tb_signs_pool_id_seq.nextval INTO :New.id FROM dual;
  SELECT 'SP'||LPAD(to_char(:New.id),4,'0') INTO :new.sp_code FROM dual;
END;

/
CREATE OR REPLACE TRIGGER DM_SKB.tb_signs_pool_lupd_trg BEFORE UPDATE ON DM_SKB.tb_signs_pool FOR EACH ROW
BEGIN
:NEW.LASTUPDATE := SYSDATE;
END tb_signs_pool_lupd_trg;

/
CREATE OR REPLACE TRIGGER DM_SKB.TB_USER_REGISTRY_ID_TRG BEFORE INSERT ON DM_SKB.TB_USER_REGISTRY FOR EACH ROW
BEGIN
  :NEW.id := DM_SKB.TB_USER_REGISTRY_ID_SEQ.nextval;
END TB_USER_REGISTRY_ID_TRG;
/
CREATE OR REPLACE TRIGGER DM_SKB.TB_UROLE_REGISTRY_ID_TRG BEFORE INSERT ON DM_SKB.TB_UROLE_REGISTRY FOR EACH ROW
BEGIN
  :NEW.id := DM_SKB.TB_UROLE_REGISTRY_ID_SEQ.NEXTVAL;
END TB_UROLE_REGISTRY_ID_TRG;
/
CREATE OR REPLACE TRIGGER DM_SKB.tb_tablekey_registry_id_trg BEFORE INSERT ON DM_SKB.tb_tablekey_registry FOR EACH ROW
BEGIN
  :NEW.id := DM_SKB.tb_tablekey_registry_id_seq.nextval;
END tb_tablekey_registry;
/
CREATE OR REPLACE TRIGGER DM_SKB.tb_tfoption_registry_id_trg BEFORE INSERT ON DM_SKB.tb_tfoption_registry FOR EACH ROW
BEGIN
  :NEW.id := DM_SKB.tb_tfoption_registry_id_seq.nextval;
END tb_tfoption_registry_id_trg;
/
CREATE OR REPLACE TRIGGER DM_SKB.tb_tfield_registry_id_trg BEFORE INSERT ON DM_SKB.tb_tfield_registry FOR EACH ROW
BEGIN
  :NEW.id := DM_SKB.tb_tfield_registry_id_seq.nextval;
END tb_tfield_registry;
/
CREATE OR REPLACE TRIGGER DM_SKB.tb_employees_lupd_trg BEFORE UPDATE ON DM_SKB.tb_employees FOR EACH ROW
BEGIN
:NEW.LASTUPDATE := SYSDATE;
END tb_employees_lupd_trg;

/
CREATE OR REPLACE TRIGGER DM_SKB.tb_entity_id_trg BEFORE INSERT ON DM_SKB.tb_entity FOR EACH ROW
  BEGIN :NEW.id := tb_entity_id_seq.nextval; END tb_entity_id_trg;
/
CREATE OR REPLACE TRIGGER DM_SKB.tb_signs_group_id_trg BEFORE INSERT ON DM_SKB.tb_signs_group FOR EACH ROW
  BEGIN :NEW.group_id := tb_signs_group_id_seq.nextval; END tb_signs_group_id_trg;
/
CREATE OR REPLACE TRIGGER DM_SKB.tb_signs_anlt_id_trg BEFORE INSERT ON DM_SKB.tb_signs_anlt FOR EACH ROW
  BEGIN :NEW.id := tb_signs_anlt_id_seq.nextval; END tb_signs_anlt_id_trg;
/
CREATE OR REPLACE TRIGGER DM_SKB.tb_signs_anlt_spec_id_trg BEFORE INSERT ON DM_SKB.tb_signs_anlt_spec FOR EACH ROW
  BEGIN :NEW.id := tb_signs_anlt_spec_id_seq.nextval; END tb_signs_anlt_spec_id_trg;
/
CREATE OR REPLACE TRIGGER DM_SKB.TB_FORM_REGISTRY_ID_TRG BEFORE INSERT ON DM_SKB.TB_FORM_REGISTRY FOR EACH ROW
BEGIN
  :NEW.id := DM_SKB.TB_FORM_REGISTRY_ID_SEQ.NEXTVAL;
END TB_FORM_REGISTRY_ID_TRG;
/
CREATE OR REPLACE TRIGGER DM_SKB.TB_CLASS_REGISTRY_ID_TRG BEFORE INSERT ON DM_SKB.TB_CLASS_REGISTRY FOR EACH ROW
BEGIN
  :NEW.ID := DM_SKB.TB_CLASS_REGISTRY_ID_SEQ.NEXTVAL;
END TB_CLASS_REGISTRY_ID_TRG;
/
CREATE OR REPLACE TRIGGER DM_SKB.TB_ROLE_REGISTRY_ID_TRG BEFORE INSERT ON DM_SKB.TB_ROLE_REGISTRY FOR EACH ROW
BEGIN
  :NEW.ID := DM_SKB.TB_ROLE_REGISTRY_ID_SEQ.NEXTVAL;
END TB_ROLE_REGISTRY_ID_TRG;
/
CREATE OR REPLACE TRIGGER DM_SKB.TB_APARAM_REGISTRY_ID_TRG BEFORE INSERT ON DM_SKB.TB_APARAM_REGISTRY FOR EACH ROW
BEGIN
  :NEW.ID := DM_SKB.TB_APARAM_REGISTRY_ID_SEQ.NEXTVAL;
END TB_APARAM_REGISTRY_ID_TRG;
/
CREATE OR REPLACE TRIGGER DM_SKB.TB_QACTION_REGISTRY_ID_TRG BEFORE INSERT ON DM_SKB.TB_QACTION_REGISTRY FOR EACH ROW
BEGIN
  :NEW.ID := DM_SKB.TB_QACTION_REGISTRY_ID_SEQ.NEXTVAL;
END TB_QACTION_REGISTRY_ID_TRG;
/
CREATE OR REPLACE TRIGGER DM_SKB.TB_FOPTION_REGISTRY_ID_TRG BEFORE INSERT ON DM_SKB.TB_FOPTION_REGISTRY FOR EACH ROW
BEGIN
  :NEW.ID := DM_SKB.TB_FOPTION_REGISTRY_ID_SEQ.NEXTVAL;
END TB_FOPTION_REGISTRY_ID_TRG;
/
CREATE OR REPLACE TRIGGER DM_SKB.TB_VERSION_REGISTRY_ID_TRG BEFORE INSERT ON DM_SKB.TB_VERSION_REGISTRY FOR EACH ROW
BEGIN
  :NEW.ID := DM_SKB.TB_VERSION_REGISTRY_ID_SEQ.NEXTVAL;
END TB_VERSION_REGISTRY_ID_TRG;
/
CREATE OR REPLACE TRIGGER DM_SKB.TB_LABEL_REGISTRY_ID_TRG BEFORE INSERT ON DM_SKB.TB_LABEL_REGISTRY FOR EACH ROW
BEGIN
  :NEW.ID := DM_SKB.TB_LABEL_REGISTRY_ID_SEQ.NEXTVAL;
END TB_LABEL_REGISTRY_ID_TRG;
/
CREATE OR REPLACE TRIGGER DM_SKB.tb_tables_registry_id_trg BEFORE INSERT ON DM_SKB.tb_tables_registry FOR EACH ROW
BEGIN
  :NEW.id := DM_SKB.tb_tables_registry_id_seq.nextval;
END tb_tables_registry_id_trg;
/
CREATE OR REPLACE TRIGGER DM_SKB.TB_QPARAM_REGISTRY_ID_TRG BEFORE INSERT ON DM_SKB.TB_QPARAM_REGISTRY FOR EACH ROW
BEGIN
  :NEW.ID := DM_SKB.TB_QPARAM_REGISTRY_ID_SEQ.NEXTVAL;
END TB_QPARAM_REGISTRY_ID_TRG;
/
CREATE OR REPLACE TRIGGER DM_SKB.tb_variable_registry_id_trg BEFORE INSERT ON DM_SKB.tb_variable_registry FOR EACH ROW
BEGIN
  :NEW.id := DM_SKB.tb_variable_registry_id_seq.nextval;
END tb_variable_registry_id_trg;
/
CREATE OR REPLACE TRIGGER DM_SKB.TB_FCOLOR_REGISTRY_ID_TRG BEFORE INSERT ON DM_SKB.TB_FCOLOR_REGISTRY FOR EACH ROW
BEGIN
  :NEW.ID := DM_SKB.TB_FCOLOR_REGISTRY_ID_SEQ.NEXTVAL;
END TB_FCOLOR_REGISTRY_ID_TRG;
/
CREATE OR REPLACE TRIGGER DM_SKB.TB_REPFORM_REGISTRY_ID_TRG BEFORE INSERT ON DM_SKB.TB_REPFORM_REGISTRY FOR EACH ROW
BEGIN
  :NEW.ID := DM_SKB.TB_REPFORM_REGISTRY_ID_SEQ.NEXTVAL;
END TB_REPFORM_REGISTRY_ID_TRG;
/
CREATE OR REPLACE TRIGGER DM_SKB.TB_QUERY_REGISTRY_ID_TRG BEFORE INSERT ON DM_SKB.TB_QUERY_REGISTRY FOR EACH ROW
BEGIN
  :NEW.ID := DM_SKB.TB_QUERY_REGISTRY_ID_SEQ.NEXTVAL;
END TB_QUERY_REGISTRY_ID_TRG;
/
CREATE OR REPLACE TRIGGER DM_SKB.TB_FPARAM_REGISTRY_ID_TRG BEFORE INSERT ON DM_SKB.TB_FPARAM_REGISTRY FOR EACH ROW
BEGIN
  :NEW.ID := DM_SKB.TB_FPARAM_REGISTRY_ID_SEQ.NEXTVAL;
END TB_FPARAM_REGISTRY_ID_TRG;
/
CREATE OR REPLACE TRIGGER DM_SKB.TB_QROLE_REGISTRY_ID_TRG BEFORE INSERT ON DM_SKB.TB_QROLE_REGISTRY FOR EACH ROW
BEGIN
  :NEW.ID := DM_SKB.TB_QROLE_REGISTRY_ID_SEQ.NEXTVAL;
END TB_QROLE_REGISTRY_ID_TRG;
/
CREATE OR REPLACE TRIGGER DM_SKB.TB_LABROLE_REGISTRY_ID_TRG BEFORE INSERT ON DM_SKB.TB_LABROLE_REGISTRY FOR EACH ROW
BEGIN
  :NEW.ID := DM_SKB.TB_LABROLE_REGISTRY_ID_SEQ.NEXTVAL;
END TB_LABROLE_REGISTRY_ID_TRG;
/
CREATE OR REPLACE TRIGGER DM_SKB.TB_FIELD_REGISTRY_ID_TRG BEFORE INSERT ON DM_SKB.TB_FIELD_REGISTRY FOR EACH ROW
BEGIN
  :NEW.ID := DM_SKB.TB_FIELD_REGISTRY_ID_SEQ.NEXTVAL;
END TB_FIELD_REGISTRY_ID_TRG;
/
CREATE OR REPLACE TRIGGER DM_SKB.tb_departments_lupd_trg BEFORE UPDATE ON DM_SKB.tb_departments FOR EACH ROW
BEGIN
:NEW.LASTUPDATE := SYSDATE;
END tb_departments_lupd_trg;

/
CREATE OR REPLACE TRIGGER DM_SKB.tb_emp_to_dep_lupd_trg BEFORE UPDATE ON DM_SKB.tb_emp_to_dep FOR EACH ROW
BEGIN
:NEW.LASTUPDATE := SYSDATE;
END tb_emp_to_dep_lupd_trg;

/
CREATE OR REPLACE TRIGGER DM_SKB.tb_signs_job_last_upd_trg BEFORE INSERT OR UPDATE ON DM_SKB.tb_signs_job
FOR EACH ROW
BEGIN
  SELECT SYSDATE INTO :NEW.last_update FROM dual;
END tb_signs_job_last_upd_trg;
/
CREATE OR REPLACE TRIGGER DM_SKB.tb_signs_calc_stat_id_trg BEFORE INSERT ON DM_SKB.tb_signs_calc_stat
FOR EACH ROW
BEGIN
  SELECT tb_signs_calc_stat_id_seq.nextval INTO :NEW.id FROM dual;
END tb_signs_calc_stat_id_trg;

/
CREATE OR REPLACE TRIGGER DM_SKB.tb_seq_registry_id_trg BEFORE INSERT ON DM_SKB.tb_seq_registry FOR EACH ROW
BEGIN
  :NEW.id := DM_SKB.tb_seq_registry_id_seq.nextval;
END tb_seq_registry_id_trg;
/
CREATE OR REPLACE TRIGGER DM_SKB.tb_signs_log_id_trg BEFORE INSERT ON DM_SKB.tb_signs_log FOR EACH ROW
BEGIN SELECT DM_SKB.tb_signs_log_id_seq.nextval INTO :NEW.id FROM dual; END tb_signs_log_id_trg;

/
CREATE OR REPLACE TRIGGER DM_SKB.tb_sign_2_anlt_id_trg BEFORE INSERT ON DM_SKB.tb_sign_2_anlt FOR EACH ROW
  BEGIN :NEW.id := tb_sign_2_anlt_id_seq.nextval; END tb_sign_2_anlt_id_trg;
/
CREATE OR REPLACE TRIGGER DM_SKB.tb_signs_history_id_trg BEFORE INSERT ON DM_SKB.tb_signs_history FOR EACH ROW
BEGIN
  SELECT tb_signs_history_id_seq.nextval INTO :New.id FROM dual;
END tb_signs_history_id_trg;

/
CREATE OR REPLACE TRIGGER DM_SKB.tb_signs_2_group_id_trg BEFORE INSERT ON DM_SKB.tb_signs_2_group FOR EACH ROW
  BEGIN :NEW.id := tb_signs_2_group_id_seq.nextval; END tb_signs_2_group_id_trg;
/
CREATE OR REPLACE TRIGGER DM_SKB.tb_anlt_2_group_id_trg BEFORE INSERT ON DM_SKB.tb_anlt_2_group FOR EACH ROW
  BEGIN :NEW.id := tb_anlt_2_group_id_seq.nextval; END tb_anlt_2_group_id_trg;
/
CREATE OR REPLACE TRIGGER DM_SKB.TB_SIGN_2_SIGN_ID_TRG BEFORE INSERT ON DM_SKB.TB_SIGN_2_SIGN FOR EACH ROW
BEGIN
  :NEW.id := DM_SKB.TB_SIGN_2_SIGN_ID_SEQ.NEXTVAL;
END TB_SIGN_2_SIGN_ID_TRG;
/
CREATE OR REPLACE TRIGGER DM_SKB.tb_ds_mdl_id_trg BEFORE INSERT ON DM_SKB.tb_ds_mdl FOR EACH ROW
BEGIN
  :NEW.id := DM_SKB.tb_ds_mdl_id_seq.nextval;
END tb_ds_mdl_id_trg;
/
CREATE OR REPLACE TRIGGER DM_SKB.tb_ds_ftrs_id_trg BEFORE INSERT ON DM_SKB.tb_ds_ftrs FOR EACH ROW
BEGIN
  :NEW.id := DM_SKB.tb_ds_ftrs_id_seq.nextval;
END tb_ds_ftrs_id_trg;
/
CREATE OR REPLACE TRIGGER DM_SKB.TB_SIGNS_DAEMONS_ID_TRG BEFORE INSERT ON DM_SKB.TB_SIGNS_DAEMONS FOR EACH ROW
BEGIN
:NEW.ID := DM_SKB.TB_SIGNS_DAEMONS_ID_SEQ.NEXTVAL;
END TB_SIGNS_DAEMONS_ID_TRG;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_DS_FTR_WEIGHT ADD CONSTRAINT PK_TB_DS_FTR_WEIGHT PRIMARY KEY (ID) USING INDEX TABLESPACE PCAP_DATA}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_TRG_REGISTRY ADD CONSTRAINT PK_TB_TRG_REGISTRY PRIMARY KEY (ID) USING INDEX TABLESPACE PCAP_DATA}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{CREATE INDEX DM_SKB.IDX_TB_SIGNS_AGGRS_001 ON DM_SKB.TB_SIGNS_AGGRS (GROUP_ID) tablespace PCAP_DATA STORAGE(INITIAL 64K NEXT 1M)}';
EXECUTE IMMEDIATE q'{CREATE UNIQUE INDEX DM_SKB.UIX_TB_SIGNS_AGGRS_001 ON DM_SKB.TB_SIGNS_AGGRS (AGGR_NAME) tablespace PCAP_DATA STORAGE(INITIAL 64K NEXT 1M)}';
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_SIGNS_AGGRS ADD CONSTRAINT PK_TB_SIGNS_AGGRS PRIMARY KEY (ID) USING INDEX TABLESPACE PCAP_DATA}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{CREATE INDEX DM_SKB.IDX_TB_SIGNS_AGGRS_P_001 ON DM_SKB.TB_SIGNS_AGGRS_P (AGGR_ID) tablespace PCAP_DATA STORAGE(INITIAL 64K NEXT 1M)}';
EXECUTE IMMEDIATE q'{CREATE UNIQUE INDEX DM_SKB.UIX_TB_SIGNS_AGGRS_P_001 ON DM_SKB.TB_SIGNS_AGGRS_P (AGGR_ID,P_NAME) tablespace PCAP_DATA STORAGE(INITIAL 64K NEXT 1M)}';
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_SIGNS_AGGRS_P ADD CONSTRAINT PK_TB_SIGNS_AGGRS_P PRIMARY KEY (ID) USING INDEX TABLESPACE PCAP_DATA}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_FLAGS_POOL ADD CONSTRAINT PK_TB_FLAGS_POOL PRIMARY KEY (ID) USING INDEX TABLESPACE PCAP_DATA}';
EXECUTE IMMEDIATE q'{CREATE UNIQUE INDEX DM_SKB.TB_FLAGS_POOL_UIX002 ON DM_SKB.TB_FLAGS_POOL (DT,NAME) tablespace PCAP_DATA STORAGE(INITIAL 64K NEXT 1M)}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_SIGNS_POOL ADD CONSTRAINT PK_TB_SIGNS_POOL PRIMARY KEY (ID) USING INDEX TABLESPACE PCAP_DATA}';
EXECUTE IMMEDIATE q'{CREATE UNIQUE INDEX DM_SKB.IDX_TB_SIGNS_POOL_U001 ON DM_SKB.TB_SIGNS_POOL (SIGN_NAME) tablespace PCAP_DATA STORAGE(INITIAL 64K NEXT 1M)}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_USER_REGISTRY ADD CONSTRAINT PK_TB_USER_REGISTRY PRIMARY KEY (ID) USING INDEX TABLESPACE PCAP_DATA}';
EXECUTE IMMEDIATE q'{CREATE UNIQUE INDEX DM_SKB.IDX_TB_USER_REGISTRY_U001 ON DM_SKB.TB_USER_REGISTRY (USER_NAME) tablespace PCAP_DATA STORAGE(INITIAL 64K NEXT 1M)}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_UROLE_REGISTRY ADD CONSTRAINT PK_TB_UROLE_REGISTRY PRIMARY KEY (ID) USING INDEX TABLESPACE PCAP_DATA}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_TABLEKEY_REGISTRY ADD CONSTRAINT PK_TB_TABLEKEY_REGISTRY PRIMARY KEY (ID) USING INDEX TABLESPACE PCAP_DATA}';
EXECUTE IMMEDIATE q'{CREATE INDEX DM_SKB.IDX_TB_TABLEKEY_REGISTRY_001 ON DM_SKB.TB_TABLEKEY_REGISTRY (TABLE_ID) tablespace PCAP_DATA STORAGE(INITIAL 64K NEXT 1M)}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_TFOPTION_REGISTRY ADD CONSTRAINT PK_TB_TFOPTION_REGISTRY PRIMARY KEY (ID) USING INDEX TABLESPACE PCAP_DATA}';
EXECUTE IMMEDIATE q'{CREATE BITMAP INDEX DM_SKB.BIDX_TB_TFOPTION_REGISTRY_001 ON DM_SKB.TB_TFOPTION_REGISTRY (OPT_NAME) tablespace PCAP_DATA STORAGE(INITIAL 64K NEXT 1M)}';
EXECUTE IMMEDIATE q'{CREATE UNIQUE INDEX DM_SKB.UIX_TB_TFOPTION_REGISTRY_U001 ON DM_SKB.TB_TFOPTION_REGISTRY (FIELD_ID,OPT_NAME) tablespace PCAP_DATA STORAGE(INITIAL 64K NEXT 1M)}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_TFIELD_REGISTRY ADD CONSTRAINT PK_TB_TFIELD_REGISTRY PRIMARY KEY (ID) USING INDEX TABLESPACE PCAP_DATA}';
EXECUTE IMMEDIATE q'{CREATE INDEX DM_SKB.IDX_TB_TFIELD_REGISTRY_001 ON DM_SKB.TB_TFIELD_REGISTRY (TABLE_ID) tablespace PCAP_DATA STORAGE(INITIAL 64K NEXT 1M)}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_EMPLOYEES ADD CONSTRAINT PK_TB_EMPLOYEES PRIMARY KEY (ID) USING INDEX TABLESPACE PCAP_DATA}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_ENTITY ADD CONSTRAINT PK_TB_ENTITY PRIMARY KEY (ID) USING INDEX TABLESPACE PCAP_DATA}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_SIGNS_GROUP ADD CONSTRAINT PK_SIGNS_GROUP PRIMARY KEY (GROUP_ID) USING INDEX TABLESPACE PCAP_DATA}';
EXECUTE IMMEDIATE q'{CREATE UNIQUE INDEX DM_SKB.IDX_TB_SIGNS_GROUP_U002 ON DM_SKB.TB_SIGNS_GROUP (GROUP_NAME) tablespace PCAP_DATA STORAGE(INITIAL 64K NEXT 1M)}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_SIGNS_ANLT ADD CONSTRAINT PK_TB_SIGNS_ANLT PRIMARY KEY (ID) USING INDEX TABLESPACE PCAP_DATA}';
EXECUTE IMMEDIATE q'{CREATE UNIQUE INDEX DM_SKB.UIX_TB_SIGNS_ANLT_001 ON DM_SKB.TB_SIGNS_ANLT (ANLT_CODE,EFFECTIVE_END) tablespace PCAP_DATA STORAGE(INITIAL 64K NEXT 1M)}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_SIGNS_ANLT_SPEC ADD CONSTRAINT PK_TB_SIGNS_ANLT_SPEC PRIMARY KEY (ID) USING INDEX TABLESPACE PCAP_DATA}';
EXECUTE IMMEDIATE q'{CREATE UNIQUE INDEX DM_SKB.IDX_TB_SIGNS_ANLT_SPEC_U001 ON DM_SKB.TB_SIGNS_ANLT_SPEC (ANLT_ID,ANLT_SPEC_VAL) tablespace PCAP_DATA STORAGE(INITIAL 64K NEXT 1M)}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_FORM_REGISTRY ADD CONSTRAINT PK_TB_FORM_REGISTRY PRIMARY KEY (ID) USING INDEX TABLESPACE PCAP_DATA}';
EXECUTE IMMEDIATE q'{CREATE INDEX DM_SKB.IDX_TB_FORM_REGISTRY_001 ON DM_SKB.TB_FORM_REGISTRY (CLASS_ID) tablespace PCAP_DATA STORAGE(INITIAL 64K NEXT 1M)}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_CLASS_REGISTRY ADD CONSTRAINT PK_TB_CLASS_REGISTRY PRIMARY KEY (ID) USING INDEX TABLESPACE PCAP_DATA}';
EXECUTE IMMEDIATE q'{CREATE UNIQUE INDEX DM_SKB.IDX_TB_CLASS_REGISTRY_U001 ON DM_SKB.TB_CLASS_REGISTRY (CLASS_NAME) tablespace PCAP_DATA STORAGE(INITIAL 64K NEXT 1M)}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_ROLE_REGISTRY ADD CONSTRAINT PK_TB_ROLE_REGISTRY PRIMARY KEY (ID) USING INDEX TABLESPACE PCAP_DATA}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_APARAM_REGISTRY ADD CONSTRAINT PK_TB_APARAM_REGISTRY PRIMARY KEY (ID) USING INDEX TABLESPACE PCAP_DATA}';
EXECUTE IMMEDIATE q'{CREATE INDEX DM_SKB.IDX_TB_APARAM_REGISTRY_001 ON DM_SKB.TB_APARAM_REGISTRY (ACTION_ID) tablespace PCAP_DATA STORAGE(INITIAL 64K NEXT 1M)}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_QACTION_REGISTRY ADD CONSTRAINT PK_TB_QACTION_REGISTRY PRIMARY KEY (ID) USING INDEX TABLESPACE PCAP_DATA}';
EXECUTE IMMEDIATE q'{CREATE INDEX DM_SKB.IDX_TB_QACTION_REGISTRY_001 ON DM_SKB.TB_QACTION_REGISTRY (QUERY_ID) tablespace PCAP_DATA STORAGE(INITIAL 64K NEXT 1M)}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_FOPTION_REGISTRY ADD CONSTRAINT PK_TB_FOPTION_REGISTRY PRIMARY KEY (ID) USING INDEX TABLESPACE PCAP_DATA}';
EXECUTE IMMEDIATE q'{CREATE BITMAP INDEX DM_SKB.BIDX_TB_FOPTION_REGISTRY_001 ON DM_SKB.TB_FOPTION_REGISTRY (OPT_NAME) tablespace PCAP_DATA STORAGE(INITIAL 64K NEXT 1M)}';
EXECUTE IMMEDIATE q'{CREATE UNIQUE INDEX DM_SKB.IDX_TB_FOPTION_REGISTRY_U001 ON DM_SKB.TB_FOPTION_REGISTRY (FIELD_ID,OPT_NAME) tablespace PCAP_DATA STORAGE(INITIAL 64K NEXT 1M)}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_VERSION_REGISTRY ADD CONSTRAINT PK_TB_VERSION_REGISTRY PRIMARY KEY (ID) USING INDEX TABLESPACE PCAP_DATA}';
EXECUTE IMMEDIATE q'{CREATE UNIQUE INDEX DM_SKB.IDX_TB_VERSION_REGISTRY_U001 ON DM_SKB.TB_VERSION_REGISTRY (VERS_NUM,EXENAME) tablespace PCAP_DATA STORAGE(INITIAL 64K NEXT 1M)}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_LABEL_REGISTRY ADD CONSTRAINT PK_TB_LABEL_REGISTRY PRIMARY KEY (ID) USING INDEX TABLESPACE PCAP_DATA}';
EXECUTE IMMEDIATE q'{CREATE UNIQUE INDEX DM_SKB.IDX_TB_LABEL_REGISTRY_U001 ON DM_SKB.TB_LABEL_REGISTRY (CAPTION) tablespace PCAP_DATA STORAGE(INITIAL 64K NEXT 1M)}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_TABLES_REGISTRY ADD CONSTRAINT PK_TB_TABLES_REGISTRY PRIMARY KEY (ID) USING INDEX TABLESPACE PCAP_DATA}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_QPARAM_REGISTRY ADD CONSTRAINT PK_TB_QPARAM_REGISTRY PRIMARY KEY (ID) USING INDEX TABLESPACE PCAP_DATA}';
EXECUTE IMMEDIATE q'{CREATE INDEX DM_SKB.IDX_TB_QPARAM_REGISTRY_001 ON DM_SKB.TB_QPARAM_REGISTRY (QUERY_ID) tablespace PCAP_DATA STORAGE(INITIAL 64K NEXT 1M)}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{CREATE UNIQUE INDEX DM_SKB.TB_VARIABLE_REGISTRY_U001 ON DM_SKB.TB_VARIABLE_REGISTRY (NAME) tablespace PCAP_DATA STORAGE(INITIAL 64K NEXT 1M)}';
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_VARIABLE_REGISTRY ADD CONSTRAINT PK_TB_VARIABLE_REGISTRY PRIMARY KEY (ID) USING INDEX TABLESPACE PCAP_DATA}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_FCOLOR_REGISTRY ADD CONSTRAINT PK_TB_FCOLOR_REGISTRY PRIMARY KEY (ID) USING INDEX TABLESPACE PCAP_DATA}';
EXECUTE IMMEDIATE q'{CREATE INDEX DM_SKB.IDX_TB_FCOLOR_REGISTRY_001 ON DM_SKB.TB_FCOLOR_REGISTRY (FIELD_ID) tablespace PCAP_DATA STORAGE(INITIAL 64K NEXT 1M)}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_REPFORM_REGISTRY ADD CONSTRAINT SYS_C001122023 PRIMARY KEY (ID) USING INDEX TABLESPACE PCAP_DATA}';
EXECUTE IMMEDIATE q'{CREATE UNIQUE INDEX DM_SKB.IDX_TB_REPFORM_REGISTRY_U001 ON DM_SKB.TB_REPFORM_REGISTRY (FORM_ID,QUERY_ID) tablespace PCAP_DATA STORAGE(INITIAL 64K NEXT 1M)}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_QUERY_REGISTRY ADD CONSTRAINT PK_TB_QUERY_REGISTRY PRIMARY KEY (ID) USING INDEX TABLESPACE PCAP_DATA}';
EXECUTE IMMEDIATE q'{CREATE INDEX DM_SKB.IDX_TB_QUERY_REGISTRY_001 ON DM_SKB.TB_QUERY_REGISTRY (FORM_ID) tablespace PCAP_DATA STORAGE(INITIAL 64K NEXT 1M)}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_FPARAM_REGISTRY ADD CONSTRAINT PK_TB_FPARAM_REGISTRY PRIMARY KEY (ID) USING INDEX TABLESPACE PCAP_DATA}';
EXECUTE IMMEDIATE q'{CREATE INDEX DM_SKB.IDX_TB_FPARAM_REGISTRY_001 ON DM_SKB.TB_FPARAM_REGISTRY (FORM_ID) tablespace PCAP_DATA STORAGE(INITIAL 64K NEXT 1M)}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_QROLE_REGISTRY ADD CONSTRAINT PK_TB_QROLE_REGISTRY PRIMARY KEY (ID) USING INDEX TABLESPACE PCAP_DATA}';
EXECUTE IMMEDIATE q'{CREATE UNIQUE INDEX DM_SKB.IDX_TB_QROLE_REGISTRY_U001 ON DM_SKB.TB_QROLE_REGISTRY (QUERY_ID,ROLE_ID) tablespace PCAP_DATA STORAGE(INITIAL 64K NEXT 1M)}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_LABROLE_REGISTRY ADD CONSTRAINT PK_TB_LABROLE_REGISTRY PRIMARY KEY (ID) USING INDEX TABLESPACE PCAP_DATA}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_FIELD_REGISTRY ADD CONSTRAINT PK_TB_FIELD_REGISTRY PRIMARY KEY (ID) USING INDEX TABLESPACE PCAP_DATA}';
EXECUTE IMMEDIATE q'{CREATE INDEX DM_SKB.IDX_TB_FIELD_REGISTRY_001 ON DM_SKB.TB_FIELD_REGISTRY (QUERY_ID) tablespace PCAP_DATA STORAGE(INITIAL 64K NEXT 1M)}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_DEPARTMENTS ADD CONSTRAINT PK_TB_DEPARTMENTS PRIMARY KEY (ID) USING INDEX TABLESPACE PCAP_DATA}';
EXECUTE IMMEDIATE q'{CREATE INDEX DM_SKB.IDX_TB_DEPARTMENTS_001 ON DM_SKB.TB_DEPARTMENTS (PARENT_ID) tablespace PCAP_DATA STORAGE(INITIAL 64K NEXT 1M)}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_EMP_TO_DEP ADD CONSTRAINT PK_TB_EMP_TO_DEP PRIMARY KEY (ID) USING INDEX TABLESPACE PCAP_DATA}';
EXECUTE IMMEDIATE q'{CREATE INDEX DM_SKB.IDX_TB_EMP_TO_DEP_001 ON DM_SKB.TB_EMP_TO_DEP (EMPLOYEE_ID) tablespace PCAP_DATA STORAGE(INITIAL 64K NEXT 1M)}';
EXECUTE IMMEDIATE q'{CREATE INDEX DM_SKB.IDX_TB_EMP_TO_DEP_002 ON DM_SKB.TB_EMP_TO_DEP (DEP_ID) tablespace PCAP_DATA STORAGE(INITIAL 64K NEXT 1M)}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{CREATE INDEX DM_SKB.IDX_TB_SIGNS_JOB_001 ON DM_SKB.TB_SIGNS_JOB (JOB_NAME) tablespace PCAP_DATA STORAGE(INITIAL 64K NEXT 1M)}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_SIGNS_CALC_STAT ADD CONSTRAINT PK_TB_SIGNS_CALC_STAT PRIMARY KEY (ID) USING INDEX TABLESPACE PCAP_DATA}';
EXECUTE IMMEDIATE q'{CREATE INDEX DM_SKB.IDX_TB_SIGNS_CALC_STAT_001 ON DM_SKB.TB_SIGNS_CALC_STAT (SIGN_NAME,ANLT_CODE,DT) tablespace PCAP_DATA STORAGE(INITIAL 64K NEXT 1M)}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_SEQ_REGISTRY ADD CONSTRAINT PK_TB_SEQ_REGISTRY PRIMARY KEY (ID) USING INDEX TABLESPACE PCAP_DATA}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_SIGNS_LOG ADD CONSTRAINT PK_TB_SIGNS_LOG PRIMARY KEY (ID) USING INDEX TABLESPACE PCAP_DATA}';
EXECUTE IMMEDIATE q'{CREATE INDEX DM_SKB.IDX_TB_SIGNS_LOG_002 ON DM_SKB.TB_SIGNS_LOG (DAT) tablespace PCAP_DATA STORAGE(INITIAL 64K NEXT 1M)}';
EXECUTE IMMEDIATE q'{CREATE INDEX DM_SKB.IDX_TB_SIGNS_LOG_003 ON DM_SKB.TB_SIGNS_LOG (UNIT) tablespace PCAP_DATA STORAGE(INITIAL 64K NEXT 1M)}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_SIGN_2_ANLT ADD CONSTRAINT PK_TB_SIGN_2_ANLT PRIMARY KEY (ID) USING INDEX TABLESPACE PCAP_DATA}';
EXECUTE IMMEDIATE q'{CREATE UNIQUE INDEX DM_SKB.IDX_TB_SIGN_2_ANLT_U001 ON DM_SKB.TB_SIGN_2_ANLT (SIGN_NAME,ANLT_CODE) tablespace PCAP_DATA STORAGE(INITIAL 64K NEXT 1M)}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_SIGNS_HISTORY ADD CONSTRAINT PK_TB_SIGNS_HISTORY PRIMARY KEY (ID) USING INDEX TABLESPACE PCAP_DATA}';
EXECUTE IMMEDIATE q'{CREATE INDEX DM_SKB.IDX_TB_SIGNS_HISTORY_002 ON DM_SKB.TB_SIGNS_HISTORY (TABLE_NAME,COL_NAME,DT,OS_USER) tablespace PCAP_DATA STORAGE(INITIAL 64K NEXT 1M)}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_SIGNS_2_GROUP ADD CONSTRAINT PK_TB_SIGNS_2_GROUP PRIMARY KEY (ID) USING INDEX TABLESPACE PCAP_DATA}';
EXECUTE IMMEDIATE q'{CREATE UNIQUE INDEX DM_SKB.IDX_TB_SIGNS_2_GROUP_U001 ON DM_SKB.TB_SIGNS_2_GROUP (SIGN_NAME,GROUP_ID) tablespace PCAP_DATA STORAGE(INITIAL 64K NEXT 1M)}';
EXECUTE IMMEDIATE q'{CREATE UNIQUE INDEX DM_SKB.IDX_TB_SIGNS_2_GROUP_U002 ON DM_SKB.TB_SIGNS_2_GROUP (GROUP_ID,SIGN_NAME) tablespace PCAP_DATA STORAGE(INITIAL 64K NEXT 1M)}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_ANLT_2_GROUP ADD CONSTRAINT PK_TB_ANLT_2_GROUP PRIMARY KEY (ID) USING INDEX TABLESPACE PCAP_DATA}';
EXECUTE IMMEDIATE q'{CREATE UNIQUE INDEX DM_SKB.IDX_ANLT_2_GROUP_U001 ON DM_SKB.TB_ANLT_2_GROUP (ANLT_CODE,GROUP_ID) tablespace PCAP_DATA STORAGE(INITIAL 64K NEXT 1M)}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{CREATE UNIQUE INDEX DM_SKB.IDX_TB_SIGN_2_SIGN_U001 ON DM_SKB.TB_SIGN_2_SIGN (SIGN_NAME,PREV_SIGN_NAME) tablespace PCAP_DATA STORAGE(INITIAL 64K NEXT 1M)}';
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_SIGN_2_SIGN ADD CONSTRAINT PK_TB_SIGN_2_SIGN PRIMARY KEY (ID) USING INDEX TABLESPACE PCAP_DATA}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_DS_MDL ADD CONSTRAINT PK_TB_DS_MDL PRIMARY KEY (ID) USING INDEX TABLESPACE PCAP_DATA}';
EXECUTE IMMEDIATE q'{CREATE UNIQUE INDEX DM_SKB.UIX_TB_DS_MDL_001 ON DM_SKB.TB_DS_MDL (MODEL_NAME) tablespace PCAP_DATA STORAGE(INITIAL 64K NEXT 1M)}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_DS_FTRS ADD CONSTRAINT PK_TB_DS_FTRS PRIMARY KEY (ID) USING INDEX TABLESPACE PCAP_DATA}';
EXECUTE IMMEDIATE q'{CREATE UNIQUE INDEX DM_SKB.UIX_TB_DS_FTRS_001 ON DM_SKB.TB_DS_FTRS (MDL_ID,FTR_NAME) tablespace PCAP_DATA STORAGE(INITIAL 64K NEXT 1M)}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_SIGNS_DAEMONS ADD CONSTRAINT PK_TB_SIGNS_DAEMONS PRIMARY KEY (ID) USING INDEX TABLESPACE PCAP_DATA}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_DS_FTR_WEIGHT ADD CONSTRAINT FK_TB_DS_FTR_WEIGHT_001 FOREIGN KEY (FTR_ID) REFERENCES DM_SKB.TB_DS_FTRS (ID) ON DELETE CASCADE}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_TRG_REGISTRY ADD CONSTRAINT FK_TB_TRG_REGISTRY_001 FOREIGN KEY (TABLE_ID) REFERENCES DM_SKB.TB_TABLES_REGISTRY (ID) ON DELETE CASCADE}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_SIGNS_AGGRS ADD CONSTRAINT FK_TB_SIGNS_AGGRS_001 FOREIGN KEY (GROUP_ID) REFERENCES DM_SKB.TB_SIGNS_GROUP (GROUP_ID) ON DELETE CASCADE}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_SIGNS_AGGRS_P ADD CONSTRAINT FK_TB_SIGNS_AGGRS_P_001 FOREIGN KEY (AGGR_ID) REFERENCES DM_SKB.TB_SIGNS_AGGRS (ID) ON DELETE CASCADE}';
END;
/
BEGIN
  NULL;
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_SIGNS_POOL ADD CONSTRAINT FK_TB_SIGNS_POOL_001 FOREIGN KEY (ENTITY_ID) REFERENCES DM_SKB.TB_ENTITY (ID)}';
END;
/
BEGIN
  NULL;
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_UROLE_REGISTRY ADD CONSTRAINT FK_TB_UROLE_REGISTRY_001 FOREIGN KEY (USER_ID) REFERENCES DM_SKB.TB_USER_REGISTRY (ID) ON DELETE CASCADE}';
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_UROLE_REGISTRY ADD CONSTRAINT FK_TB_UROLE_REGISTRY_002 FOREIGN KEY (ROLE_ID) REFERENCES DM_SKB.TB_ROLE_REGISTRY (ID) ON DELETE CASCADE}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_TABLEKEY_REGISTRY ADD CONSTRAINT FK_TB_TABLEKEY_REGISTRY_001 FOREIGN KEY (TABLE_ID) REFERENCES DM_SKB.TB_TABLES_REGISTRY (ID) ON DELETE CASCADE}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_TFOPTION_REGISTRY ADD CONSTRAINT FK_TB_TFOPTION_REGISTRY_001 FOREIGN KEY (FIELD_ID) REFERENCES DM_SKB.TB_TFIELD_REGISTRY (ID) ON DELETE CASCADE}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_TFIELD_REGISTRY ADD CONSTRAINT FK_TB_TFIELD_REGISTRY_001 FOREIGN KEY (TABLE_ID) REFERENCES DM_SKB.TB_TABLES_REGISTRY (ID) ON DELETE CASCADE}';
END;
/
BEGIN
  NULL;
END;
/
BEGIN
  NULL;
END;
/
BEGIN
  NULL;
END;
/
BEGIN
  NULL;
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_SIGNS_ANLT_SPEC ADD CONSTRAINT FK_TB_SIGNS_ANLT_SPEC FOREIGN KEY (ANLT_ID) REFERENCES DM_SKB.TB_SIGNS_ANLT (ID)}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_FORM_REGISTRY ADD CONSTRAINT FK_TB_FORM_REGISTRY_001 FOREIGN KEY (CLASS_ID) REFERENCES DM_SKB.TB_CLASS_REGISTRY (ID)}';
END;
/
BEGIN
  NULL;
END;
/
BEGIN
  NULL;
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_APARAM_REGISTRY ADD CONSTRAINT FK_TB_APARAM_REGISTRY_001 FOREIGN KEY (ACTION_ID) REFERENCES DM_SKB.TB_QACTION_REGISTRY (ID) ON DELETE CASCADE}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_QACTION_REGISTRY ADD CONSTRAINT FK_TB_QACTION_REGISTRY_001 FOREIGN KEY (QUERY_ID) REFERENCES DM_SKB.TB_QUERY_REGISTRY (ID)}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_FOPTION_REGISTRY ADD CONSTRAINT FK_TB_FOPTION_REGISTRY_001 FOREIGN KEY (FIELD_ID) REFERENCES DM_SKB.TB_FIELD_REGISTRY (ID) ON DELETE CASCADE}';
END;
/
BEGIN
  NULL;
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_LABEL_REGISTRY ADD CONSTRAINT FK_TB_LABEL_REGISTRY_001 FOREIGN KEY (FORM_ID) REFERENCES DM_SKB.TB_FORM_REGISTRY (ID)}';
END;
/
BEGIN
  NULL;
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_QPARAM_REGISTRY ADD CONSTRAINT FK_TB_QPARAM_REGISTRY_001 FOREIGN KEY (QUERY_ID) REFERENCES DM_SKB.TB_QUERY_REGISTRY (ID) ON DELETE CASCADE}';
END;
/
BEGIN
  NULL;
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_FCOLOR_REGISTRY ADD CONSTRAINT FK_TB_FCOLOR_REGISTRY_001 FOREIGN KEY (FIELD_ID) REFERENCES DM_SKB.TB_FIELD_REGISTRY (ID) ON DELETE CASCADE}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_REPFORM_REGISTRY ADD CONSTRAINT FK_TB_REPFORM_REGISTRY_001 FOREIGN KEY (FORM_ID) REFERENCES DM_SKB.TB_FORM_REGISTRY (ID) ON DELETE CASCADE}';
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_REPFORM_REGISTRY ADD CONSTRAINT FK_TB_REPFORM_REGISTRY_002 FOREIGN KEY (QUERY_ID) REFERENCES DM_SKB.TB_QUERY_REGISTRY (ID) ON DELETE CASCADE}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_QUERY_REGISTRY ADD CONSTRAINT FK_TB_QUERY_REGISTRY_001 FOREIGN KEY (FORM_ID) REFERENCES DM_SKB.TB_FORM_REGISTRY (ID) ON DELETE CASCADE}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_FPARAM_REGISTRY ADD CONSTRAINT FK_FPARAM_REGISTRY_001 FOREIGN KEY (FORM_ID) REFERENCES DM_SKB.TB_FORM_REGISTRY (ID) ON DELETE CASCADE}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_QROLE_REGISTRY ADD CONSTRAINT FK_TB_QROLE_REGISTRY_002 FOREIGN KEY (ROLE_ID) REFERENCES DM_SKB.TB_ROLE_REGISTRY (ID) ON DELETE CASCADE}';
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_QROLE_REGISTRY ADD CONSTRAINT FK_TB_QROLE_REGISTRY_001 FOREIGN KEY (QUERY_ID) REFERENCES DM_SKB.TB_QUERY_REGISTRY (ID) ON DELETE CASCADE}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_LABROLE_REGISTRY ADD CONSTRAINT FK_TB_LABROLE_REGISTRY_002 FOREIGN KEY (ROLE_ID) REFERENCES DM_SKB.TB_ROLE_REGISTRY (ID) ON DELETE CASCADE}';
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_LABROLE_REGISTRY ADD CONSTRAINT FK_TB_LABROLE_REGISTRY_001 FOREIGN KEY (LABEL_ID) REFERENCES DM_SKB.TB_LABEL_REGISTRY (ID) ON DELETE CASCADE}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_FIELD_REGISTRY ADD CONSTRAINT FK_TB_FIELD_REGISTRY_001 FOREIGN KEY (QUERY_ID) REFERENCES DM_SKB.TB_QUERY_REGISTRY (ID) ON DELETE CASCADE}';
END;
/
BEGIN
  NULL;
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_EMP_TO_DEP ADD CONSTRAINT FK_EMP_TO_DEP_001 FOREIGN KEY (EMPLOYEE_ID) REFERENCES DM_SKB.TB_EMPLOYEES (ID) ON DELETE CASCADE}';
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_EMP_TO_DEP ADD CONSTRAINT FK_EMP_TO_DEP_002 FOREIGN KEY (DEP_ID) REFERENCES DM_SKB.TB_DEPARTMENTS (ID) ON DELETE CASCADE}';
END;
/
BEGIN
  NULL;
END;
/
BEGIN
  NULL;
END;
/
BEGIN
  NULL;
END;
/
BEGIN
  NULL;
END;
/
BEGIN
  NULL;
END;
/
BEGIN
  NULL;
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_SIGNS_2_GROUP ADD CONSTRAINT FK_SIGNS_2_GROUP_002 FOREIGN KEY (SIGN_ID) REFERENCES DM_SKB.TB_SIGNS_POOL (ID)}';
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_SIGNS_2_GROUP ADD CONSTRAINT FK_SIGNS_2_GROUP_001 FOREIGN KEY (GROUP_ID) REFERENCES DM_SKB.TB_SIGNS_GROUP (GROUP_ID)}';
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_ANLT_2_GROUP ADD CONSTRAINT FK_ANLT_2_GROUP_001 FOREIGN KEY (GROUP_ID) REFERENCES DM_SKB.TB_SIGNS_GROUP (GROUP_ID)}';
END;
/
BEGIN
  NULL;
END;
/
BEGIN
  NULL;
END;
/
BEGIN
  NULL;
EXECUTE IMMEDIATE q'{ALTER TABLE DM_SKB.TB_DS_FTRS ADD CONSTRAINT FK_TB_DS_FTRS FOREIGN KEY (MDL_ID) REFERENCES DM_SKB.TB_DS_MDL (ID) ON DELETE CASCADE}';
END;
/
BEGIN
  NULL;
END;
/
